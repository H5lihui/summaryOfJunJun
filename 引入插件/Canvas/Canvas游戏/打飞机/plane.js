/*	我方飞机构造方法*///-----------------行为对象------------------------------//声明行为对象构造方法  飞行var PlaneFly=function(){	this.lastPlaneFly=0;}PlaneFly.prototype={	execute:function(sprite,context,time){		if(this.lastPlaneFly!==0){			sprite.top+=sprite.moveY*((time-this.lastPlaneFly)/1000);			//检测飞机是否飞出屏幕			if(sprite.top>=context.canvas.height+sprite.height){				sprite.visible=false;			}		}		this.lastEnemyFly=time;	}}//声明行为对象构造方法  爆炸var PlaneBomb=function(){	this.lastPlaneBomb=0;	//绘制动作中一个图片的时间	this.cycle=300;}PlaneBomb.prototype={	execute:function(sprite,context,time){		//结束一次图片的绘制  飞机生存时不切换图片		if(time-this.lastPlaneBomb>this.cycle && sprite.hp==0){			sprite.painter.advance();			this.lastPlaneBomb=time;		}	}}var createPlane=function(name){		//飞机需要的图片	var allUrl='gameArts.png';	var planeOption={w:66,h:82,hp:1};	var planeCells=[					{x:432,y:0,w:66,h:82},					{x:432,y:82,w:66,h:84},					{x:432,y:164,w:66,h:84},					{x:432,y:246,w:66,h:84},					{x:432,y:328,w:66,h:84}				];	//声明精灵图片列表变量		var Plane=new Sprite(name,new SpritePainter(allUrl,planeCells),[new PlaneFly(),new PlaneBomb()]);		Plane.width=planeOption.w;	Plane.height=planeOption.h;	Plane.left=127;	Plane.top=450;	Plane.moveY=planeOption.moveY;	Plane.hp=planeOption.hp;;		return Plane;}